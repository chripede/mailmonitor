#!/usr/bin/env python3
"""
Email monitor: sender testmail via ekstern SMTP og checker levering via IMAP.
Logger til syslog og kan sende webhook/Pushover-notifikation ved fejl.

Exit codes:
 0 OK
 1 Configfejl
 2 SMTP-fejl
 3 Mail ikke modtaget
 4 IMAP-fejl
"""

import os, sys, time, uuid, socket, ssl, smtplib, imaplib, logging, requests
from email.message import EmailMessage
from logging.handlers import SysLogHandler

# ---- Konfiguration via miljÃ¸variabler ----
SMTP_HOST = os.getenv("MON_SMTP_HOST")
SMTP_PORT = int(os.getenv("MON_SMTP_PORT", "587"))
SMTP_USER = os.getenv("MON_SMTP_USER")
SMTP_PASS = os.getenv("MON_SMTP_PASS")
FROM_ADDR = os.getenv("MON_FROM")
TO_ADDR = os.getenv("MON_TO")
REPLY_TO = os.getenv("MON_REPLY_TO", FROM_ADDR)

IMAP_HOST = os.getenv("MON_IMAP_HOST")
IMAP_PORT = int(os.getenv("MON_IMAP_PORT", "993"))
IMAP_USER = os.getenv("MON_IMAP_USER")
IMAP_PASS = os.getenv("MON_IMAP_PASS")
IMAP_FOLDER = os.getenv("MON_IMAP_FOLDER", "INBOX")

TIMEOUT = int(os.getenv("MON_TIMEOUT", "90"))
POLL_INTERVAL = int(os.getenv("MON_POLL_INTERVAL", "5"))

WEBHOOK_URL = os.getenv("MON_WEBHOOK_URL")  # optional: Slack, Discord, etc.
PUSHOVER_USER = os.getenv("MON_PUSHOVER_USER")  # optional
PUSHOVER_TOKEN = os.getenv("MON_PUSHOVER_TOKEN")

# ---- Logging setup ----
log = logging.getLogger("mailmonitor")
log.setLevel(logging.INFO)
try:
    syslog = SysLogHandler(address="/dev/log")
    formatter = logging.Formatter("mailmonitor: %(message)s")
    syslog.setFormatter(formatter)
    log.addHandler(syslog)
except Exception:
    # fallback til stderr
    logging.basicConfig(level=logging.INFO)

def notify_error(msg: str):
    """Send fejlbesked via webhook eller pushover"""
    if WEBHOOK_URL:
        try:
            requests.post(WEBHOOK_URL, json={"text": f"ðŸ“§ Email monitor fejl: {msg}"}, timeout=10)
        except Exception as e:
            log.error(f"Webhook fejlede: {e}")
    if PUSHOVER_USER and PUSHOVER_TOKEN:
        try:
            requests.post(
                "https://api.pushover.net/1/messages.json",
                data={
                    "token": PUSHOVER_TOKEN,
                    "user": PUSHOVER_USER,
                    "message": f"ðŸ“§ Email monitor fejl:\n{msg}",
                    "title": "Email monitor",
                    "priority": 1,
                },
                timeout=10,
            )
        except Exception as e:
            log.error(f"Pushover fejlede: {e}")

def check_env():
    needed = [SMTP_HOST, SMTP_USER, SMTP_PASS, FROM_ADDR, TO_ADDR, IMAP_HOST, IMAP_USER, IMAP_PASS]
    if not all(needed):
        log.error("Manglende miljÃ¸variabler (MON_*).")
        return False
    return True

def send_mail(mid, token):
    msg = EmailMessage()
    msg["From"] = FROM_ADDR
    msg["To"] = TO_ADDR
    msg["Reply-To"] = REPLY_TO
    msg["Subject"] = f"monitor-check {mid}"
    msg["Message-ID"] = f"<{mid}@monitor.check>"
    msg["X-Mon-Token"] = token
    msg.set_content(f"Monitor token: {token}\nHost: {socket.gethostname()}")

    try:
        ctx = ssl.create_default_context()
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=30) as s:
            s.starttls(context=ctx)
            s.login(SMTP_USER, SMTP_PASS)
            s.send_message(msg)
        return True
    except Exception as e:
        log.error(f"SMTP fejl: {e}")
        notify_error(f"SMTP fejl: {e}")
        return False

def imap_check(mid, token):
    try:
        ctx = ssl.create_default_context()
        with imaplib.IMAP4_SSL(IMAP_HOST, IMAP_PORT, ssl_context=ctx) as M:
            M.login(IMAP_USER, IMAP_PASS)
            M.select(IMAP_FOLDER)
            # prÃ¸v sÃ¸gning efter Message-ID og token
            for query in [
                f'HEADER Message-ID "<{mid}@monitor.check>"',
                f'HEADER X-Mon-Token "{token}"',
                f'SUBJECT "monitor-check {mid}"',
            ]:
                typ, data = M.search(None, query)
                if typ == "OK" and data and data[0]:
                    return True
            return False
    except Exception as e:
        log.error(f"IMAP fejl: {e}")
        notify_error(f"IMAP fejl: {e}")
        return None

def main():
    if not check_env():
        sys.exit(1)

    mid = uuid.uuid4().hex
    token = uuid.uuid4().hex

    if not send_mail(mid, token):
        sys.exit(2)

    deadline = time.time() + TIMEOUT
    while time.time() < deadline:
        result = imap_check(mid, token)
        if result is True:
            log.info("OK - mail modtaget.")
            sys.exit(0)
        if result is None:
            sys.exit(4)
        time.sleep(POLL_INTERVAL)

    msg = f"Mail ikke modtaget inden {TIMEOUT}s."
    log.error(msg)
    notify_error(msg)
    sys.exit(3)

if __name__ == "__main__":
    main()

